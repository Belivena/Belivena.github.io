[{"title":"软件质量","date":"2017-07-25T12:55:59.000Z","path":"2017/07/25/test3/","text":"一、 质量定义质量是物体本身的属性，物体的质量与物体的形状、物态及其所处空间位置无关，质量是物体的一个基本属性。软件产品满足用户或规定显性需求或隐性需求程度。 内部质量 过程质量 外部质量 使用质量 二、 质量特性2.1 功能性 定义： *软件在指定的使用条件下，满足用户明确和隐含需求的功能的能力。 适合性： *软件为指定的任务和用户目标提供一组合适功能的能力。 准确性： *软件提供具有所需精确度的正确或相符的结果或效果的能力。 互操作性： *软件与一个或更多的规定系统进行交互的能力。 保密安全性： *软件保护信息和数据的能力，以使未授权的人员或系统不能阅读或修改这些信息和数据，而不拒绝授权人员或系统对他们的访问。 功能性依从性： *软件遵循与功能性相关的标准、约定或法规以及类似规定的能力。这些标准要考虑国际标准、国家标准、行业标准、企业内部规范等。 2.2 可靠性 定义： *软件在指定条件下使用时，维持规定的性能级别的能力。 成熟性： *软件为避免由软件中错误而导致失效的能力。 容错性： *在软件出现故障或者违反指定接口的情况下，软件维持规定的性能级别的能力。 易恢复性： *在失效发生的情况下，软件重建规定的性能级别并恢复受直接影响的数据的能力。可靠性依从性：软件遵循与可靠性相关的标准、约定或法规的能力。 2.3 易用性 定义： *在指定条件下使用时，软件被理解、学习、使用和吸引用户的能力。 易理解性： *软件使用户能理解软件是否合适，以及如何能将软件用于特定的任务和使用环境的能力。 易学习性： *软件使用户能学习其应用的能力。 易操作性： *软件使用用户能操作和控制它的能力。 吸引性： *软件吸引用户的能力。 易用性依从性： *软件遵循与易用性相关的标准、约定、风格指南或法规的能力。这些标准要考虑国际标准、国家标准、行业标准、企业内部规范等。 2.4 效率 定义： *在规定条件下，相对于所用资源的数量，软件可提供适当性能的能力。 时间特性： *在规定条件下，软件执行其功能时，提供适当的响应和处理时间以及吞吐率的能力，即完成用户的某个功能需要的响应时间。 资源利用性： *在规定的条件下，软件执行其功能时，使用合适的资源数量和类别的能力。 效率依从性： *软件遵循与效率相关的标准、约定或法规的能力。 2.5 可移植性 定义： *软件可被修改的能力。修改可能包括修正、改进或软件对环境、需求和功能规格说明变化的一种适应性。 易分析性： *软件诊断软件中的缺陷、失效原因或识别待修改部分的能力。 易改变性：*软件使指定的修改可以被实现的能力。 稳定性： *软件避免由于软件修改而造成意外结果的能力。 易测试性： *软件使已修改软件能被确认的能力。 维护性依从性： *软件遵循与维护性相关的标准、约定或法规的能力。 2.6 可维护性 定义： *软件从一种环境迁移到另外一种环境的能力 适应性： *软件无须采用有别于为考虑该软件的目的而准备的活动或手段，就可能适应不同指定环境的能力。 易安装性： *软件在指定环境中被安装的能力。 共存性： *软件在公共环境中同于其分享公共资源的其他独立软件共存的能力。 易替换性： *软件在同样环境下，替代另一个相同用途的指定软件产品的能力。 可移植性依从性： *软件遵循与可移植性相关的标准、约定或法规的能力。","content":"<p><img src=\"/2017/07/25/test3/test3.png\" alt=\"测试\"></p>\n<h2 id=\"一、-质量定义\"><a href=\"#一、-质量定义\" class=\"headerlink\" title=\"一、 质量定义\"></a>一、 质量定义</h2><p>质量是物体本身的属性，物体的质量与物体的形状、物态及其所处空间位置无关，质量是物体的一个基本属性。<br>软件产品满足用户或规定显性需求或隐性需求程度。</p>\n<ul>\n<li>内部质量</li>\n<li>过程质量</li>\n<li>外部质量</li>\n<li>使用质量</li>\n</ul>\n<h2 id=\"二、-质量特性\"><a href=\"#二、-质量特性\" class=\"headerlink\" title=\"二、 质量特性\"></a>二、 质量特性</h2><h3 id=\"2-1-功能性\"><a href=\"#2-1-功能性\" class=\"headerlink\" title=\"2.1 功能性\"></a>2.1 功能性</h3><ul>\n<li>定义： *<br>软件在指定的使用条件下，满足用户明确和隐含需求的功能的能力。</li>\n<li>适合性： *<br>软件为指定的任务和用户目标提供一组合适功能的能力。</li>\n<li>准确性： *<br>软件提供具有所需精确度的正确或相符的结果或效果的能力。</li>\n<li>互操作性： *<br>软件与一个或更多的规定系统进行交互的能力。</li>\n<li>保密安全性： *<br>软件保护信息和数据的能力，以使未授权的人员或系统不能阅读或修改这些信息和数据，而不拒绝授权人员或系统对他们的访问。</li>\n<li>功能性依从性： *<br>软件遵循与功能性相关的标准、约定或法规以及类似规定的能力。这些标准要考虑国际标准、国家标准、行业标准、企业内部规范等。</li>\n</ul>\n<h3 id=\"2-2-可靠性\"><a href=\"#2-2-可靠性\" class=\"headerlink\" title=\"2.2 可靠性\"></a>2.2 可靠性</h3><ul>\n<li>定义： *<br>软件在指定条件下使用时，维持规定的性能级别的能力。</li>\n<li>成熟性： *<br>软件为避免由软件中错误而导致失效的能力。</li>\n<li>容错性： *<br>在软件出现故障或者违反指定接口的情况下，软件维持规定的性能级别的能力。</li>\n<li>易恢复性： *<br>在失效发生的情况下，软件重建规定的性能级别并恢复受直接影响的数据的能力。<br>可靠性依从性：软件遵循与可靠性相关的标准、约定或法规的能力。</li>\n</ul>\n<h3 id=\"2-3-易用性\"><a href=\"#2-3-易用性\" class=\"headerlink\" title=\"2.3 易用性\"></a>2.3 易用性</h3><ul>\n<li>定义： *<br>在指定条件下使用时，软件被理解、学习、使用和吸引用户的能力。</li>\n<li>易理解性： *<br>软件使用户能理解软件是否合适，以及如何能将软件用于特定的任务和使用环境的能力。</li>\n<li>易学习性： *<br>软件使用户能学习其应用的能力。</li>\n<li>易操作性： *<br>软件使用用户能操作和控制它的能力。</li>\n<li>吸引性： *<br>软件吸引用户的能力。</li>\n<li>易用性依从性： *<br>软件遵循与易用性相关的标准、约定、风格指南或法规的能力。这些标准要考虑国际标准、国家标准、行业标准、企业内部规范等。</li>\n</ul>\n<h3 id=\"2-4-效率\"><a href=\"#2-4-效率\" class=\"headerlink\" title=\"2.4 效率\"></a>2.4 效率</h3><ul>\n<li>定义： *<br>在规定条件下，相对于所用资源的数量，软件可提供适当性能的能力。</li>\n<li>时间特性： *<br>在规定条件下，软件执行其功能时，提供适当的响应和处理时间以及吞吐率的能力，即完成用户的某个功能需要的响应时间。</li>\n<li>资源利用性： *<br>在规定的条件下，软件执行其功能时，使用合适的资源数量和类别的能力。</li>\n<li>效率依从性： *<br>软件遵循与效率相关的标准、约定或法规的能力。</li>\n</ul>\n<h3 id=\"2-5-可移植性\"><a href=\"#2-5-可移植性\" class=\"headerlink\" title=\"2.5 可移植性\"></a>2.5 可移植性</h3><ul>\n<li>定义： *<br>软件可被修改的能力。修改可能包括修正、改进或软件对环境、需求和功能规格说明变化的一种适应性。</li>\n<li>易分析性： *<br>软件诊断软件中的缺陷、失效原因或识别待修改部分的能力。</li>\n<li>易改变性：*<br>软件使指定的修改可以被实现的能力。</li>\n<li>稳定性： *<br>软件避免由于软件修改而造成意外结果的能力。</li>\n<li>易测试性： *<br>软件使已修改软件能被确认的能力。</li>\n<li>维护性依从性： *<br>软件遵循与维护性相关的标准、约定或法规的能力。</li>\n</ul>\n<h3 id=\"2-6-可维护性\"><a href=\"#2-6-可维护性\" class=\"headerlink\" title=\"2.6 可维护性\"></a>2.6 可维护性</h3><ul>\n<li>定义： *<br>软件从一种环境迁移到另外一种环境的能力</li>\n<li>适应性： *<br>软件无须采用有别于为考虑该软件的目的而准备的活动或手段，就可能适应不同指定环境的能力。</li>\n<li>易安装性： *<br>软件在指定环境中被安装的能力。</li>\n<li>共存性： *<br>软件在公共环境中同于其分享公共资源的其他独立软件共存的能力。</li>\n<li>易替换性： *<br>软件在同样环境下，替代另一个相同用途的指定软件产品的能力。</li>\n<li>可移植性依从性： *<br>软件遵循与可移植性相关的标准、约定或法规的能力。</li>\n</ul>\n","link":"","tags":[{"name":"iTesting","slug":"iTesting","permalink":"//gentlebaymax.com/tags/iTesting/"},{"name":"测试理论","slug":"测试理论","permalink":"//gentlebaymax.com/tags/测试理论/"}]},{"title":"系统测试类型、软件测试方法","date":"2017-07-25T12:27:52.000Z","path":"2017/07/25/test2/","text":"一、 系统测试类型1.1 功能性测试在指定使用条件下，使用被测对象，验证其是否满足用户显性或隐性需求。测试关注点： 是否有不正确或遗漏多余的功能； 满足系统显性或隐性需求（系统设计的角度）； 是否对输入输出做出了正确的响应，输出结果能否正确的显示。 1.2 性能测试通过模拟被测对象运行业务压力或使用场景，验证被测对象是否满足预先设定的性能指标。验证系统是否具有宣称的能力。了解测试系统典型场景，并具有确定的性能目标。要求在真实环境下实施。 1.3 安全性测试测试被测对象的安全保护机制保护系统不受非法侵入，能够接受正确授权的操作。 1.4 兼容性测试验证被测对象在不同的操作系统、硬件信息等环境下的运行情况。 二、软件测试方法2.1 黑盒测试不关注被测对象内部结构，仅从用户需求考虑，是否满足用户显性或隐性需求。 2.2 白盒测试结构测试、逻辑驱动测试。 2.3 灰盒测试即关注被测对象的外部特征，又关注其内部设计。 2.4 静态测试不执行被测对象程序，不运行被测对象的测试方法。 2.5 动态测试执行被测对象，进行检测。 2.6 手工测试通过测试工程师使用、验证被测对象是否满足用户需求。 2.7 自动化测试通过自动化测试工具，或脚本语言自动化完成测试工程。","content":"<p><img src=\"/2017/07/25/test2/test2.jpeg\" alt=\"测试\"></p>\n<h2 id=\"一、-系统测试类型\"><a href=\"#一、-系统测试类型\" class=\"headerlink\" title=\"一、 系统测试类型\"></a>一、 系统测试类型</h2><h3 id=\"1-1-功能性测试\"><a href=\"#1-1-功能性测试\" class=\"headerlink\" title=\"1.1 功能性测试\"></a>1.1 功能性测试</h3><p>在指定使用条件下，使用被测对象，验证其是否满足用户显性或隐性需求。<br>测试关注点：</p>\n<ul>\n<li>是否有不正确或遗漏多余的功能；</li>\n<li>满足系统显性或隐性需求（系统设计的角度）；</li>\n<li>是否对输入输出做出了正确的响应，输出结果能否正确的显示。</li>\n</ul>\n<h3 id=\"1-2-性能测试\"><a href=\"#1-2-性能测试\" class=\"headerlink\" title=\"1.2 性能测试\"></a>1.2 性能测试</h3><p>通过模拟被测对象运行业务压力或使用场景，验证被测对象是否满足预先设定的性能指标。<br>验证系统是否具有宣称的能力。<br>了解测试系统典型场景，并具有确定的性能目标。<br>要求在真实环境下实施。</p>\n<h3 id=\"1-3-安全性测试\"><a href=\"#1-3-安全性测试\" class=\"headerlink\" title=\"1.3 安全性测试\"></a>1.3 安全性测试</h3><p>测试被测对象的安全保护机制保护系统不受非法侵入，能够接受正确授权的操作。</p>\n<h3 id=\"1-4-兼容性测试\"><a href=\"#1-4-兼容性测试\" class=\"headerlink\" title=\"1.4 兼容性测试\"></a>1.4 兼容性测试</h3><p>验证被测对象在不同的操作系统、硬件信息等环境下的运行情况。</p>\n<h2 id=\"二、软件测试方法\"><a href=\"#二、软件测试方法\" class=\"headerlink\" title=\"二、软件测试方法\"></a>二、软件测试方法</h2><h3 id=\"2-1-黑盒测试\"><a href=\"#2-1-黑盒测试\" class=\"headerlink\" title=\"2.1 黑盒测试\"></a>2.1 黑盒测试</h3><p>不关注被测对象内部结构，仅从用户需求考虑，是否满足用户显性或隐性需求。</p>\n<h3 id=\"2-2-白盒测试\"><a href=\"#2-2-白盒测试\" class=\"headerlink\" title=\"2.2 白盒测试\"></a>2.2 白盒测试</h3><p>结构测试、逻辑驱动测试。</p>\n<h3 id=\"2-3-灰盒测试\"><a href=\"#2-3-灰盒测试\" class=\"headerlink\" title=\"2.3 灰盒测试\"></a>2.3 灰盒测试</h3><p>即关注被测对象的外部特征，又关注其内部设计。</p>\n<h3 id=\"2-4-静态测试\"><a href=\"#2-4-静态测试\" class=\"headerlink\" title=\"2.4 静态测试\"></a>2.4 静态测试</h3><p>不执行被测对象程序，不运行被测对象的测试方法。</p>\n<h3 id=\"2-5-动态测试\"><a href=\"#2-5-动态测试\" class=\"headerlink\" title=\"2.5 动态测试\"></a>2.5 动态测试</h3><p>执行被测对象，进行检测。</p>\n<h3 id=\"2-6-手工测试\"><a href=\"#2-6-手工测试\" class=\"headerlink\" title=\"2.6 手工测试\"></a>2.6 手工测试</h3><p>通过测试工程师使用、验证被测对象是否满足用户需求。</p>\n<h3 id=\"2-7-自动化测试\"><a href=\"#2-7-自动化测试\" class=\"headerlink\" title=\"2.7 自动化测试\"></a>2.7 自动化测试</h3><p>通过自动化测试工具，或脚本语言自动化完成测试工程。</p>\n","link":"","tags":[{"name":"iTesting","slug":"iTesting","permalink":"//gentlebaymax.com/tags/iTesting/"},{"name":"测试理论","slug":"测试理论","permalink":"//gentlebaymax.com/tags/测试理论/"}]},{"title":"测试基础","date":"2017-07-12T02:32:30.000Z","path":"2017/07/12/test1/","text":"一、测试定义 通过人工或自动的手段，对被测对象进行检测活动，目的在于发现被测对象是否实现用户的需求，或者弄清实际结果与预测结果之间的差异。 二、 测试目的 发现被测对象与用户需求间的差异—俗称找bug。 通过测试活动发现并解决缺陷，增加人们对被测对象的质量信心。 通过测试活动，获取被测对象的质量信息，为决策提供数据依据。 通过测试活动，预防缺陷，从而降低项目或产品的风险。 三、 测试原则 测试证明软件存在缺陷 不可能执行穷尽测试 测试应该尽早启动，尽早介入 缺陷存在群集现象 杀虫剂悖论 不同的测试活动依赖不同的测试背景 不存在缺陷的谬论 四、 测试对象 软件源代码 与软件源代码匹配的文档 支撑软件源代码运行的配置数据 需求阶段：需求文档—测试需求文档是否正确实现了用户的需求 系统设计阶段：概要设计文档、详细设计文档、是否有设计或逻辑上的错误 编码阶段：测试源代码—发现编程上的错误 系统测试阶段：被测对象是否满足用户需求 五、 测试级别（测试阶段）5.1 单元测试 针对被测系统最小的组成单元实施的测试活动，一般是类或函数，也可能是最小的功能单元。 5.2 集成测试 针对组件/单元与组件/单元之间的接口实施的测试活动，验证接口设计是否与设计相符。分三种集成：函数间集成、模块间集成、子系统间集成。 5.3 系统测试(最常见) 通过集成测试的软件，部署在真实的用户环境下执行测试。 接近用户需求。 通过黑盒测试。 5.4 验收测试 以用户为主的测试，验收组应该由项目组成员、用户代表组成。 α测试—由用户在开发环境下执行的测试活动，开发者在测试人员身边，发现问题及时沟通解决。在受控环境下执行测试。 β测试—开发者不在测试人员身边，发现问题由专人统一收集，再由研发人员进行修改。在不受控环境下执行测试。 UAT测试—用户接受度测试：一般商业用户验证系统可用性进行的测试。","content":"<p><img src=\"/2017/07/12/test1/test1_1.jpg\" alt=\"测试\"></p>\n<h2 id=\"一、测试定义\"><a href=\"#一、测试定义\" class=\"headerlink\" title=\"一、测试定义\"></a>一、测试定义</h2><p>  通过人工或自动的手段，对被测对象进行检测活动，目的在于发现被测对象是否实现用户的需求，或者弄清实际结果与预测结果之间的差异。</p>\n<h2 id=\"二、-测试目的\"><a href=\"#二、-测试目的\" class=\"headerlink\" title=\"二、 测试目的\"></a>二、 测试目的</h2><ul>\n<li>发现被测对象与用户需求间的差异—俗称找bug。</li>\n<li>通过测试活动发现并解决缺陷，增加人们对被测对象的质量信心。</li>\n<li>通过测试活动，获取被测对象的质量信息，为决策提供数据依据。</li>\n<li>通过测试活动，预防缺陷，从而降低项目或产品的风险。</li>\n</ul>\n<h2 id=\"三、-测试原则\"><a href=\"#三、-测试原则\" class=\"headerlink\" title=\"三、 测试原则\"></a>三、 测试原则</h2><ul>\n<li>测试证明软件存在缺陷</li>\n<li>不可能执行穷尽测试</li>\n<li>测试应该尽早启动，尽早介入</li>\n<li>缺陷存在群集现象</li>\n<li>杀虫剂悖论</li>\n<li>不同的测试活动依赖不同的测试背景</li>\n<li>不存在缺陷的谬论</li>\n</ul>\n<h2 id=\"四、-测试对象\"><a href=\"#四、-测试对象\" class=\"headerlink\" title=\"四、 测试对象\"></a>四、 测试对象</h2><ul>\n<li>软件源代码</li>\n<li>与软件源代码匹配的文档</li>\n<li>支撑软件源代码运行的配置数据</li>\n<li>需求阶段：需求文档—测试需求文档是否正确实现了用户的需求</li>\n<li>系统设计阶段：概要设计文档、详细设计文档、是否有设计或逻辑上的错误</li>\n<li>编码阶段：测试源代码—发现编程上的错误</li>\n<li>系统测试阶段：被测对象是否满足用户需求</li>\n</ul>\n<h2 id=\"五、-测试级别（测试阶段）\"><a href=\"#五、-测试级别（测试阶段）\" class=\"headerlink\" title=\"五、 测试级别（测试阶段）\"></a>五、 测试级别（测试阶段）</h2><h3 id=\"5-1-单元测试\"><a href=\"#5-1-单元测试\" class=\"headerlink\" title=\"5.1 单元测试\"></a>5.1 单元测试</h3><p>  针对被测系统最小的组成单元实施的测试活动，一般是类或函数，也可能是最小的功能单元。</p>\n<h3 id=\"5-2-集成测试\"><a href=\"#5-2-集成测试\" class=\"headerlink\" title=\"5.2 集成测试\"></a>5.2 集成测试</h3><p>  针对组件/单元与组件/单元之间的接口实施的测试活动，验证接口设计是否与设计相符。<br>分三种集成：函数间集成、模块间集成、子系统间集成。</p>\n<h3 id=\"5-3-系统测试-最常见\"><a href=\"#5-3-系统测试-最常见\" class=\"headerlink\" title=\"5.3 系统测试(最常见)\"></a>5.3 系统测试(最常见)</h3><p>  通过集成测试的软件，部署在真实的用户环境下执行测试。<br>  接近用户需求。<br>  通过黑盒测试。</p>\n<h3 id=\"5-4-验收测试\"><a href=\"#5-4-验收测试\" class=\"headerlink\" title=\"5.4 验收测试\"></a>5.4 验收测试</h3><p>  以用户为主的测试，验收组应该由项目组成员、用户代表组成。</p>\n<ul>\n<li>α测试—由用户在开发环境下执行的测试活动，开发者在测试人员身边，发现问题及时沟通解决。在受控环境下执行测试。</li>\n<li>β测试—开发者不在测试人员身边，发现问题由专人统一收集，再由研发人员进行修改。在不受控环境下执行测试。</li>\n<li>UAT测试—用户接受度测试：一般商业用户验证系统可用性进行的测试。</li>\n</ul>\n","link":"","tags":[{"name":"iTesting","slug":"iTesting","permalink":"//gentlebaymax.com/tags/iTesting/"},{"name":"测试理论","slug":"测试理论","permalink":"//gentlebaymax.com/tags/测试理论/"}]},{"title":"用热爱抵御生活的琐碎","date":"2017-07-11T02:32:30.000Z","path":"2017/07/11/domo/","text":"曾看过一部电影，韩国著名导演李沧东的文艺片《诗》。 主人公美子是一位已经66岁的女人，她没有丈夫，与女儿分开，与读初中的外孙独自生活，靠做钟点工赚点小钱。 日子虽然清贫，但丝毫没有影响她对生活的热爱，时髦的打扮甚至掩饰了岁月在她身上留下的痕迹。 美子酷爱诗歌，不仅经常参加诗歌朗诵会，而且开始学习写诗。她总是留意观察生活中的点滴，捕捉随时可能出现的灵感，然后把它们记录在随身携带的小本上，想要写出美丽的诗歌。 她观察阳光下的树，捡起落在地上的杏子，蹲在地上看路边的小花，捕捉随时可能出现的灵感。生活有痛苦有麻烦，但是她最终用诗歌完成了自我的救赎。 最后，她终于写出了自己的诗： “你在那边还好吗？感到孤独吗？ 日落时天空还会变红吗？鸟儿还在通往树林的路上唱歌吗？ 你能收到我不敢寄出的信吗？我能表达我不敢承认的忏悔吗？ 时间会流逝，玫瑰会枯萎吗？”面对这疲累不定的生活，有人喜欢赏花、喜欢练字，有人热爱阅读，热爱运动…找一样能让你完全放松自我和沉浸进去的事物。 在这全情的投入和享受中，感受到快乐和平静，用这快乐抵抗平凡生活的庸常。 *","content":"<p><img src=\"/2017/07/11/domo/bag3.jpg\" alt=\"热爱生活\"></p>\n<p>曾看过一部电影，韩国著名导演李沧东的文艺片《诗》。</p>\n<p>主人公美子是一位已经66岁的女人，她没有丈夫，与女儿分开，与读初中的外孙独自生活，靠做钟点工赚点小钱。</p>\n<p>日子虽然清贫，但丝毫没有影响她对生活的热爱，时髦的打扮甚至掩饰了岁月在她身上留下的痕迹。</p>\n<p>美子酷爱诗歌，不仅经常参加诗歌朗诵会，而且开始学习写诗。她总是留意观察生活中的点滴，捕捉随时可能出现的灵感，然后把它们记录在随身携带的小本上，想要写出美丽的诗歌。</p>\n<p>她观察阳光下的树，捡起落在地上的杏子，蹲在地上看路边的小花，捕捉随时可能出现的灵感。生活有痛苦有麻烦，但是她最终用诗歌完成了自我的救赎。</p>\n<p><img src=\"/2017/07/11/domo/bag2.jpg\" alt=\"诗\"></p>\n<p>最后，她终于写出了自己的诗：</p>\n<blockquote>\n<p>“你在那边还好吗？<br>感到孤独吗？ </p>\n<p>日落时天空还会变红吗？<br>鸟儿还在通往树林的路上唱歌吗？ </p>\n<p>你能收到我不敢寄出的信吗？<br>我能表达我不敢承认的忏悔吗？ </p>\n<p>时间会流逝，玫瑰会枯萎吗？”<br>面对这疲累不定的生活，有人喜欢赏花、喜欢练字，有人热爱阅读，热爱运动…找一样能让你完全放松自我和沉浸进去的事物。</p>\n</blockquote>\n<ul>\n<li>在这全情的投入和享受中，感受到快乐和平静，用这快乐抵抗平凡生活的庸常。 *</li>\n</ul>\n","link":"","tags":[{"name":"随笔","slug":"随笔","permalink":"//gentlebaymax.com/tags/随笔/"}]}]